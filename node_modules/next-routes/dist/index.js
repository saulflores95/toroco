'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pathToRegexp = require('path-to-regexp');

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _url = require('url');

var _link = require('next/link');

var _link2 = _interopRequireDefault(_link);

var _router = require('next/router');

var _router2 = _interopRequireDefault(_router);

var _arrayFind = require('array-find');

var _arrayFind2 = _interopRequireDefault(_arrayFind);

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function (opts) {
  return new Routes(opts);
};

var Routes = function () {
  function Routes() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$Link = _ref.Link,
        Link = _ref$Link === undefined ? _link2.default : _ref$Link,
        _ref$Router = _ref.Router,
        Router = _ref$Router === undefined ? _router2.default : _ref$Router;

    _classCallCheck(this, Routes);

    this.routes = [];
    this.Link = this.getLink(Link);
    this.Router = this.getRouter(Router);
  }

  _createClass(Routes, [{
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.routes.push(new (Function.prototype.bind.apply(Route, [null].concat(args)))());
      return this;
    }
  }, {
    key: 'findByName',
    value: function findByName(name) {
      var route = (0, _arrayFind2.default)(this.routes, function (route) {
        return route.name === name;
      });
      if (!route) {
        throw new Error('Unknown route: ' + name);
      }
      return route;
    }
  }, {
    key: 'match',
    value: function match(path) {
      var params = void 0;
      var route = (0, _arrayFind2.default)(this.routes, function (route) {
        return params = route.match(path);
      });
      return { route: route, params: params };
    }
  }, {
    key: 'getRequestHandler',
    value: function getRequestHandler(app) {
      var _this = this;

      var nextHandler = app.getRequestHandler();

      return function (req, res) {
        var parsedUrl = (0, _url.parse)(req.url, true);
        var pathname = parsedUrl.pathname,
            query = parsedUrl.query;

        var _match = _this.match(pathname),
            route = _match.route,
            params = _match.params;

        if (route) {
          app.render(req, res, route.page, _extends({}, query, params));
        } else {
          nextHandler(req, res, parsedUrl);
        }
      };
    }
  }, {
    key: 'getLink',
    value: function getLink(Link) {
      var _this2 = this;

      var LinkRoutes = function LinkRoutes(props) {
        var route = props.route,
            params = props.params,
            newProps = _objectWithoutProperties(props, ['route', 'params']);

        if (route) {
          Object.assign(newProps, _this2.findByName(route).getLinkProps(params));
        }

        return _react2.default.createElement(Link, newProps);
      };
      return LinkRoutes;
    }
  }, {
    key: 'getRouter',
    value: function getRouter(Router) {
      var _this3 = this;

      Router.pushRoute = function (name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = arguments[2];

        var _findByName$getLinkPr = _this3.findByName(name).getLinkProps(params),
            href = _findByName$getLinkPr.href,
            as = _findByName$getLinkPr.as;

        return Router.push(href, as, options);
      };

      Router.replaceRoute = function (name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = arguments[2];

        var _findByName$getLinkPr2 = _this3.findByName(name).getLinkProps(params),
            href = _findByName$getLinkPr2.href,
            as = _findByName$getLinkPr2.as;

        return Router.replace(href, as, options);
      };

      Router.prefetchRoute = function (name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _findByName$getLinkPr3 = _this3.findByName(name).getLinkProps(params),
            href = _findByName$getLinkPr3.href;

        return Router.prefetch(href);
      };

      return Router;
    }
  }]);

  return Routes;
}();

var Route = function () {
  function Route(name, pattern) {
    var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : name;

    _classCallCheck(this, Route);

    this.name = name;
    this.pattern = pattern || '/' + name;
    this.page = page.replace(/^\/?(.*)/, '/$1');
    this.regex = (0, _pathToRegexp2.default)(this.pattern, this.keys = []);
    this.keyNames = this.keys.map(function (key) {
      return key.name;
    });
    this.toPath = _pathToRegexp2.default.compile(this.pattern);
  }

  _createClass(Route, [{
    key: 'match',
    value: function match(path) {
      var values = this.regex.exec(path);
      if (values) {
        return this.valuesToParams(values.slice(1));
      }
    }
  }, {
    key: 'valuesToParams',
    value: function valuesToParams(values) {
      var _this4 = this;

      return values.reduce(function (params, val, i) {
        return Object.assign(params, _defineProperty({}, _this4.keys[i].name, val));
      }, {});
    }
  }, {
    key: 'getHref',
    value: function getHref() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.page + '?' + toQuerystring(params);
    }
  }, {
    key: 'getAs',
    value: function getAs() {
      var _this5 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var as = this.toPath(params);
      var keys = Object.keys(params);
      var qsKeys = keys.filter(function (key) {
        return !(0, _arrayIncludes2.default)(_this5.keyNames, key);
      });

      if (!qsKeys.length) return as;

      var qsParams = qsKeys.reduce(function (qs, key) {
        return Object.assign(qs, _defineProperty({}, key, params[key]));
      }, {});

      return as + '?' + toQuerystring(qsParams);
    }
  }, {
    key: 'getLinkProps',
    value: function getLinkProps() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var as = this.getAs(params);
      var href = this.getHref(params);
      return { as: as, href: href };
    }
  }]);

  return Route;
}();

var toQuerystring = function toQuerystring() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(obj).map(function (key) {
    var value = obj[key];
    if (Array.isArray(value)) {
      value = value.join('/');
    }
    return [encodeURIComponent(key), encodeURIComponent(value)].join('=');
  }).join('&');
};